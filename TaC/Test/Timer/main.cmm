/*
 * TaC Test Source Code
 *    Tokuyama kousen Educational Computer 16bit Ver.
 *
 * Copyright (C) 2009-2022 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * main.cmm : テストプログラムの main
 *
 * 2022.03.06 v.2.0     : TeC-CPU V3 対応
 * 2013.01.07 v.1.0     : TeC-CPU V2 対応
 * 2012.01.11 v.0.0     : 初期バージョン
 *
 * $Id$
 *
 */

#include "util.h"

void putSIO(char c) {                       // SIO への出力
  while((in(0x0a) & 0x80)==0)
    ;
  out(0x08, ord(c));
}

// 1文字表示ルーチン
public void putch(char c) {                 // SIO へ出力する
  if (c=='\n') putSIO('\r');
  putSIO(c);
}

// 文字列出力
public void putstr(char[] str) {
  for (int i=0; str[i]!='\0'; i=i+1)
    putch(str[i]);
}

// 16進数出力
char[] hstr = "0123456789abcdef";
public void puthex(int x) {
  putch(hstr[(x>>12)&0x000f]);
  putch(hstr[(x>>8 )&0x000f]);
  putch(hstr[(x>>4 )&0x000f]);
  putch(hstr[(x    )&0x000f]);
}
 
// エラー終了
void error() {
  putstr("error!\n");                    // エラー
  halt();
}

void wait(int n) {
  for (int i=0; i<n; i=i+1)
   wait1m();
}

// ここからスタート
boolean intFlg0;
boolean intFlg1;
boolean intFlg2;
boolean intFlg3;
boolean intFlg4;
boolean intFlg5;
boolean intFlg6;
boolean intFlg7;
boolean intFlg8;
boolean intFlg9;
boolean intFlgA;
boolean intFlgB;
boolean intFlgC;
boolean intFlgD;
boolean intFlgE;
boolean intFlgF;

interrupt int0() { intFlg0 = true; }
interrupt int1() { intFlg1 = true; }
interrupt int2() { intFlg2 = true; }
interrupt int3() { intFlg3 = true; }
interrupt int4() { intFlg4 = true; }
interrupt int5() { intFlg5 = true; }
interrupt int6() { intFlg6 = true; }
interrupt int7() { intFlg7 = true; }
interrupt int8() { intFlg8 = true; }
interrupt int9() { intFlg9 = true; }
interrupt intA() { intFlgA = true; }
interrupt intB() { intFlgB = true;
                   putstr("\nadr=");
                   puthex(in(0x00a2));
                   putstr("\nres=");
                   puthex(in(0x00a4));
                   halt();}
interrupt intC() { intFlgC = true; }
interrupt intD() { intFlgD = true; }
interrupt intE() { intFlgE = true; }
interrupt intF() { intFlgF = true; }

public void main() {
  int[] Vector = _ItoA(0xffe0);
  Vector[0] = addrof(int0);
  Vector[1] = addrof(int1);
  Vector[2] = addrof(int2);
  Vector[3] = addrof(int3);
  Vector[4] = addrof(int4);
  Vector[5] = addrof(int5);
  Vector[6] = addrof(int6);
  Vector[7] = addrof(int7);
  Vector[8] = addrof(int8);
  Vector[9] = addrof(int9);
  Vector[10]= addrof(intA);
  Vector[11]= addrof(intB);
  Vector[12]= addrof(intC);
  Vector[13]= addrof(intD);
  Vector[14]= addrof(intE);
  Vector[15]= addrof(intF);

  out(0x0000,   1000);                   // タイマー0,周期 1s
  out(0x0002, 0x8001);                   // タイマー0,スタート
  out(0x0004,    300);                   // タイマー1,周期 300ms
  out(0x0006, 0x8001);                   // タイマー1,スタート
  out(0x000a, 0x0040);                   // sio受信割込み許可

  putstr("Int test start\n");

  for(;;) {
    setPri(0x00c0);                      // 割込み許可
    wait(100);                           // 100ms に一度
    setPri(0x0040);                      // 割込み禁止
    putch('.');
    if (intFlg0) {
      intFlg0 = false;
      putstr("-0-");
    } else if (intFlg1) {
      intFlg1 = false;
      putstr("-1-");
    } else if (intFlg2) {
      intFlg2 = false;
      putstr("-2-");
    } else if (intFlg3) {
      intFlg3 = false;
      putstr("-3-");
    } else if (intFlg4) {
      intFlg4 = false;
      putstr("-4-");
    } else if (intFlg5) {
      intFlg5 = false;
      putstr("-5-");
      putch(chr(in(0x008)));
    } else if (intFlg6) {
      intFlg6 = false;
      putstr("-6-");
    } else if (intFlg7) {
      intFlg7 = false;
      putstr("-7-");
    } else if (intFlg8) {
      intFlg8 = false;
      putstr("-8-");
    } else if (intFlg9) {
      intFlg9 = false;
      putstr("-9-");
    } else if (intFlgA) {
      intFlgA = false;
      putstr("-A-");
    } else if (intFlgB) {
      intFlgB = false;
      putstr("-B-");
    } else if (intFlgC) {
      intFlgC = false;
      putstr("-C-");
    } else if (intFlgD) {
      intFlgD = false;
      putstr("-D-");
    } else if (intFlgE) {
      intFlgE = false;
      putstr("-E-");
    } else if (intFlgF) {
      intFlgF = false;
      putstr("-F-");
    }
  }
}
