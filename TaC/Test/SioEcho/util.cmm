/*
 * TaC Kernel Source Code
 *    Tokuyama kousen Educational Computer 16bit Ver.
 *
 * Copyright (C) 2008-2010 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * util.cmm : C-- が動くために必要な関数群
 *
 * 2010.07.20           : Subversion による管理を開始
 * 2010.03.12 v0.0.3    : public 修飾子を追加
 * 2009.11.05 v0.0.2    : バイト配列関係の関数を追加
 * 2009.04.16 v0.0.1    : Boot 用に書き換え
 * 2008.08              : Kernel 用初期バージョン
 *
 * $Id$
 *
 */

#include "util.h"

struct __mblock {                               /* malloc がメモリを管理する*/
  __mblock next;                                /* ためのデータ構造         */
  int     size;
};

__mblock __mempool;                             /* 空き領域リストのルート   */

public void __cstart() {                        /* プログラム起動前の初期化 */
  __mempool = __end();                          /* 空き領域リストに番兵を   */
  __mempool.size = 0;                           /* 作る．size=0によって結合 */
                                                /* される可能性がなくなる   */
  __mempool.next = __AddrAdd(__mempool,2);      /* 空き領域 */
  __mempool.next.size = __memsize() - 2;        /* 空きメモリサイズ */
  __mempool.next.next = null;
}

/*
 * メモリ管理ルーチン
 */
public void[] malloc(int s) {                   /* メモリ割り当て           */
  s=s+2;                                        /* 制御データ分大きく       */
  if (s<2) {                                    /* 32Kw 以上の割り当て不可  */
    putstr("malloc: size error\n");             /* (負とみなすので)         */
    for (;;)
      ;
    //_exit(1);
  }

  __mblock p = __mempool;                       /* 直前の領域     */
  __mblock m = p.next;                          /* 対象となる領域 */

  while (__ucmp(m.size,s)<0) {                  /* 領域が小さい間 */
    p = m;                                      /* リストを手繰る */
    m = m.next;
    if (m==null) {                              /* リストの最後まできた */
      putstr("malloc: no enough memory\n");
      for (;;)
        ;
      //_exit(1);
    }
  }

  if (m.size==s) {                              /* ピッタリの領域を見つけた */
    p.next = m.next;
  } else {                                      /* 領域を分割する必要がある */
    int ss = m.size - s;
    __mblock q = __AddrAdd(m, s);               /* 残り領域 */
    q.next = m.next;
    q.size = ss;
    p.next = q;
    m.size = s;
    m.next = __end();
  }

  return __AddrAdd(m, 2);                       /* 管理領域を除いて返す     */
}

void __badaddr() {
   putstr("free: bad address\n");
   for (;;)
     ;
    //_exit(1);
}

public void free(void[] t) {                    /* 領域解放 */
  __mblock q  = __AddrAdd(t, -2);               /* 解放する領域 */
  __mblock p = __mempool;                       /* 直前の空き領域 */
  __mblock m = p.next;                          /* 直後の空き領域 */

  if (q.next!=__end()) __badaddr();             /* 領域マジックナンバー確認  */

  while (__acmp(m, q)<0) {                      /* 解放する領域の位置を探る  */
    p = m;
    m = m.next;
    if (m==null) break;
  }

  void[] ql = __AddrAdd(q,q.size);              /* 解放する領域の最後 */
  void[] pl = __AddrAdd(p,p.size);              /* 直前の領域の最後 */

  if (__acmp(q,pl)<0||m!=null&&__acmp(m,ql)<0)  /* 未割り当て領域では？ */
    __badaddr();

  if (pl==q) {                                  /* 直前の領域に隣接している */
    p.size = p.size + q.size;
    if (ql==m) {                                /* 直後の領域とも隣接してる */
      p.size = p.size + m.size;
      p.next = m.next;
    }
    return;
  }

  if (m==null) {                                /* ヒープの最後の部分       */
    p.next = q;
    q.next = null;
    return;
  }

  if (ql==m) {                                  /* 直後の領域に隣接している */
    q.size = q.size + m.size;
    q.next = m.next;
    p.next = q;
    return;
  }

  p.next = q;
  q.next = m;
}

/*
 * 入出力ルーチン
 */
char[] __hstr = "0123456789abcdef";
int  __putnum_w;
int  __putnum_b;
char __putnum_p;
boolean __putnum_m;

void __putnum_sub(int x, int n) {
  if (x!=0) {
    __putnum_sub(x/__putnum_b, n+1);
    putch(__hstr[x%__putnum_b]);
  } else {
    if (__putnum_m&&__putnum_p!=' ') putch('-');
    if (n==0) __putnum_w = __putnum_w - 1;
    while (__putnum_w>n) {
      putch(__putnum_p);
      __putnum_w = __putnum_w - 1;
    }
    if (__putnum_m&&__putnum_p==' ') putch('-');
    if (n==0) putch('0');
  }
}
    
void __uputnum(int x, int w, char p, int base) {
  __putnum_b = base;
  __putnum_m = false;
  __putnum_w = w;
  __putnum_p = p;
  __putnum_sub(x,0);
}

void __sputnum(int x, int w, char p, int base) {
  __putnum_b = base;
  __putnum_m = false;
  if (x<0) {
    x = -x;
    __putnum_m = true;
    w = w - 1;
  }
  __putnum_w = w;
  __putnum_p = p;
  __putnum_sub(x,0);
}

public void putdec(int x, int w, char p) {
  __sputnum(x,w,p,10);
}

public void puthex(int x, int w, char p) {
  __uputnum(x,w,p,16);
}

public int printf(char[] fmt, ...) {
  int[] args = __args();
  int n=0;
  int arg = args[0];
  for (int i=0; fmt[i]!='\0'; i=i+1) {
    char c = fmt[i];
    if (c=='%') {
      c = fmt[i=i+1];
      int  p = ' ';
      if (c=='0') p='0';
      int  w = 0;
      while ('0'<=c && c<='9') {
        w = w * 10 + c - '0';
	c = fmt[i=i+1];
      }
      if (c=='\0') {
        return n;
      } else if (c=='o') {
        __uputnum(arg,w,p,8);
	arg = args[n=n+1];
      } else if (c=='d') {
        __sputnum(arg,w,p,10);
	arg = args[n=n+1];
      } else if (c=='x') {
        __uputnum(arg,w,p,16);
	arg = args[n=n+1];
      } else if (c=='c') {
        putch(arg);
	arg = args[n=n+1];
      } else if (c=='s') {
        putstr(__ItoA(arg));
	arg = args[n=n+1];
      } else if (c=='%') {
        putch('%');
      } else {
        putch(c);
      }
    } else 
      putch(c);
  }
  return n;
}

/*
 * 16bit int 配列をバイト配列とみなして 1 バイト読み出す
 */
public int byte(int[] b, int x) {
  int v = b[ x >> 1 ];
  if ((x & 1) == 0)                      // 偶数アドレスは
    return v & 0x00ff;                   // 下位アドレス
  return (v >> 8) & 0x00ff;              // 奇数番は上位アドレス
}

