/*
 * TaC カーネルの原型
 *
 * 2019.01.13 :	いくつかのバグを解決
 * 2016.11.09 :	TeC7用に書換え
 * 2010.06.18 :	Makefile 中 cpp に std=c99 オプション追加
 * 2010.03.12 : main に public を書き加える
 * 2009.11.05 : SIO と同時に PS/2 からの入力も受け付ける
 * 2009.11.03 : 割込みルーチンを C-- の interrupt 関数で記述
 * 2009.05.13 : 割込みとリングバッファを使った SIO 入出力ルーチンを作成
 *              (SIO 割込みが C-- ルーチンから扱えることを確認)
 */

#include "crt0.hmm"
#define  BSIZE   256

#ifdef RN4020
#define DATA 0x0028
#define CTRL 0x002a
#define VECT 2
#else
#define DATA 0x0008
#define CTRL 0x000a
#define VECT 4
#endif

/*
 * SIO 等で使用できるリングバッファと管理ルーチン
 */
// リングバッファ型
struct RingBuf {
  char[] buf;                             // バッファ
  int    head, tail;                      // ポインタ
  int    cnt;                             // カウンタ
};

RingBuf rcvBuf = { null, 0, 0, 0 };       // リングバッファインスタンス
RingBuf trsBuf = { null, 0, 0, 0 };

int nextIdx(int idx) {                    // 直後の添字を求める
  int next = idx + 1;
  if (next>=BSIZE) next = 0;
  return next;
}

int prevIdx(int idx) {                    // 直前の添字を求める
  int next = idx - 1;
  if (next<0) next = BSIZE - 1;
  return next;
}

// リングバッファは空か
#define ISEmpty(buf) ((buf).cnt==0)

// リングバッファは満か
#define ISFull(buf) ((buf).cnt>=BSIZE)

// リングバッファに 1 文字追加
boolean putBuf(RingBuf buf, char c) {
  if (ISFull(buf)) return false;          // バッファがパンク！(無視)
  buf.buf[buf.head] = c;
  buf.head = nextIdx(buf.head);
  buf.cnt = buf.cnt + 1;
  return true;
}

char getBuf(RingBuf buf) {                // リングバッファから1文字取り出し
  if (ISEmpty(buf)) return '\0';          //  空の 場合は '\0'
  char c = buf.buf[buf.tail];             // 一文字取り出し
  buf.tail = nextIdx(buf.tail);           // tail を進めて
  buf.cnt = buf.cnt - 1;                  // cnt を減らす
  return c;                               // 一文字返す
}

/*
 *  SIO ハードウエア制御
 */

// SIO 送信関係
boolean trsIdle;                          // トランスミッタがアイドル状態

// SIO 送信割込み処理ルーチン
interrupt sioTrs() {
  if (ISEmpty(trsBuf)) {                  // 送信すべきデータがないなら
    out(CTRL,0x0040);                     // 送信割込み禁止
    trsIdle = true;
  } else {                                // そうでなければ
    int c = ord(getBuf(trsBuf));          // 送信バッファから一文字取り出す
    out(DATA,c);                          // データを送信
  }
}

// SIO へ１文字出力
void putSio(char c) {
  int r = setPri(KERN|DI);                // 割込み禁止状態で
  if (trsIdle) {                          // トランスミッタはアイドル状態
    out(DATA,ord(c));                     // 1. 送信を始める    （順序重要）
    out(CTRL,0x00c0);                     // 2. 割込みを許可する（順序重要）
    trsIdle = false;                      // トランスミッタは動作中
  } else {
    putBuf(trsBuf, c);                    // 送信バッファに１文字追加
  }
  setPri(r);
}

// 受信関係
boolean enterFlag;                        // エンターが入力された

// SIO から入力された文字をバッファに格納する
void rcvData(char c) {
  if (0x0020<=ord(c) && ord(c)<=0x007e) { // 印刷可能な ASCII 文字なら
    if(putBuf(rcvBuf, c))                 // バッファへ転記
      putSio(c);                          // 転記できた場合はエコーバック
    return;
  }

  if (c=='\10') {                         // BS
    if(!ISEmpty(rcvBuf)) {                // 受信バッファにデータがあれば
      putSio('\10');                      // 画面から１文字消去し
      putSio(' ');
      putSio('\10');
      rcvBuf.head = prevIdx(rcvBuf.head); // バッファから１文字取り消し
      rcvBuf.cnt = rcvBuf.cnt - 1;
    }
    return;
  }

  if (c=='\r') {                          // Enter
    enterFlag = true;                     // フラグを立てて
    putSio('\r');                         // 画面を改行
    putSio('\n');
    return;
  }

  // 以上のどれでもなければ無視する
}

// SIO 受信割込み処理ルーチン
interrupt sioRcv() {
  char c = chr(in(DATA));                // 受信データを入力する
  rcvData(c);
}

// バッファから１文字入力
char getSio() {
  int r = setPri(KERN|DI);                // 割込み禁止状態で
  char c = getBuf(rcvBuf);
  setPri(r);
  return c;
}

// ここからはクリティカルセクションを含まない

// 受信した１行をバッファから取り出す
void getSioStr(char[] buf) {
  char c;
  int  i = 0;
  while ((c=getSio())!='\0') {
    buf[i] = c;
    i = i + 1;
  }
  buf[i] = '\0';
}

// 文字列を出力
void putSioStr(char[] str) {
  for (int i=0; str[i]!='\0'; i=i+1)
    putSio(str[i]);
}

char[] _buf1 = array(BSIZE);
char[] _buf2 = array(BSIZE);
void initIO() {
  rcvBuf.buf = _buf1;
  trsBuf.buf = _buf2;
  while ((in(CTRL)&0x80)==0x00){}    // トランスミッタが空になるのを待つ
  out(CTRL,0x0040);                  // SIO受信割込み許可、送信割込み禁止
  trsIdle   = true;                  // トランスミッタはアイドル状態
  enterFlag = false;                 // 入力は完了していない
}

char[] comBuf = array(BSIZE);        // コマンド解析用バッファ
void command() {
  getSioStr(comBuf);
  putSioStr(comBuf);
  putSio('\r');
  putSio('\n');
}

public void main() {
  int[] vect   = _ItoA(0xffe0);      // 割込みベクタの配列
  vect[VECT  ] = addrof(sioRcv);     // sio受信ベクタの初期化
  vect[VECT+1] = addrof(sioTrs);     // sio送信ベクタの初期化

  initIO();                          // IO の初期化
  setPri(KERN|EI);                   // 割込み許可

  putSioStr("TaC-OS(^^;;;\tVer.0.0.0\r\n");

  for(;;){          // カーネルは止まれない
    if (enterFlag) {
      enterFlag = false;
      command();
   }
  }
}
